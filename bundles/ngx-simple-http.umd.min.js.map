{"version":3,"sources":["ng://ngx-simple-http/version.ts","ng://ngx-simple-http/simple-http.service.ts","ng://ngx-simple-http/simple-http.module.ts"],"names":["VERSION","Version","SimpleHttpService","http","this","prototype","createHttpDelete","apiEndpoint","apiParams","apiHeaders","sendHttpDelete","params","HttpParams","prop","undefined","append","delete","headers","createHttpGet","sendHttpGet","get","createHttpPost","apiBody","sendHttpPost","post","createHttpPut","sendHttpPut","put","Injectable","args","providedIn","HttpClient","SimpleHttpModule","NgModule","imports","HttpClientModule","providers"],"mappings":"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","sourcesContent":["import { Version } from '@angular/core';\n\nexport const VERSION = new Version('1.0.0-1fd619b-1fd619b');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SimpleHttpService {\n  constructor(private http: HttpClient) { }\n  /**\n   * Constructs and sends a HTTP DELETE request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   * @deprecated Use {@link SimpleHttpService#sendHttpDelete}\n   */\n  createHttpDelete<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    return this.sendHttpDelete<P, R>(apiEndpoint, apiParams, apiHeaders);\n  }\n  /**\n   * Constructs and sends a HTTP DELETE request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   */\n  sendHttpDelete<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.delete<R>(\n        apiEndpoint,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.delete<R>(\n        apiEndpoint,\n        {\n          params: params\n        }\n      );\n    }\n  }\n\n  /**\n   * Constructs and sends a HTTP GET request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   * @deprecated Use {@link SimpleHttpService#sendHttpGet}\n   */\n  createHttpGet<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    return this.sendHttpGet<P, R>(apiEndpoint, apiParams, apiHeaders);\n  }\n  /**\n   * Constructs and sends a HTTP GET request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   */\n  sendHttpGet<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.get<R>(\n        apiEndpoint,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.get<R>(\n        apiEndpoint,\n        {\n          params: params\n        }\n      );\n    }\n  }\n\n  /**\n   * Constructs and sends a HTTP POST request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @template B A TypeScript interface to type the HTTP request's body to\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   * @deprecated Use {@link SimpleHttpService#sendHttpPost}\n   */\n  createHttpPost<\n    B extends any,\n    P extends any,\n    R extends any>(apiEndpoint: string, apiParams: P, apiBody: B = null, apiHeaders: HttpHeaders = null): Observable<R> {\n    return this.sendHttpPost<B, P, R>(apiEndpoint, apiParams, apiBody, apiHeaders);\n  }\n  /**\n   * Constructs and sends a HTTP POST request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @template B A TypeScript interface to type the HTTP request's body to\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   */\n  sendHttpPost<\n    B extends any,\n    P extends any,\n    R extends any>(apiEndpoint: string, apiParams: P, apiBody: B = null, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      if (apiBody) {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params,\n            headers: apiHeaders\n          }\n        );\n      } else {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params,\n            headers: apiHeaders\n          }\n        );\n      }\n    } else {\n      if (apiBody) {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params\n          }\n        );\n      } else {\n        return this.http.post<R>(\n          apiEndpoint,\n          {\n            params: params\n          }\n        );\n      }\n    }\n  }\n  /**\n   * Constructs and sends a HTTP PUT request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @template B A TypeScript interface to type the HTTP request's body to\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   */\n  createHttpPut<\n    B extends any,\n    P extends any,\n    R extends any>(\n      apiEndpoint: string,\n      apiParams: P,\n      apiBody: B,\n      apiHeaders: HttpHeaders = null): Observable<R> {\n    return this.sendHttpPut<B, P, R>(apiEndpoint, apiParams, apiBody, apiHeaders);\n  }\n  /**\n   * Constructs and sends a HTTP PUT request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @template B A TypeScript interface to type the HTTP request's body to\n   * @template P A TypeScript interface to type the HTTP request's parameters to\n   * @template R A TypeScript interface to type the HTTP request's response to\n   * @return A `HttpClient` instance\n   */\n  sendHttpPut<\n    B extends any,\n    P extends any,\n    R extends any>(\n      apiEndpoint: string,\n      apiParams: P,\n      apiBody: B,\n      apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.put<R>(\n        apiEndpoint,\n        apiBody,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.put<R>(\n        apiEndpoint,\n        apiBody,\n        {\n          params: params\n        }\n      );\n    }\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { SimpleHttpService } from './simple-http.service';\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    SimpleHttpService\n  ]\n})\nexport class SimpleHttpModule { }\n"]}