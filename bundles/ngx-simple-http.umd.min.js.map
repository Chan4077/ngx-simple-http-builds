{"version":3,"sources":["ng://ngx-simple-http/version.ts","ng://ngx-simple-http/simple-http.service.ts","ng://ngx-simple-http/simple-http.module.ts"],"names":["VERSION","Version","SimpleHttpService","http","this","prototype","createHttpDelete","apiEndpoint","apiParams","apiHeaders","params","HttpParams","prop","undefined","append","delete","headers","createHttpGet","get","createHttpPost","apiBody","post","createHttpPut","put","Injectable","args","providedIn","HttpClient","SimpleHttpModule","NgModule","imports","HttpClientModule","providers"],"mappings":"sVAEA,IAAaA,EAAU,IAAIC,EAAAA,QAAQ,iBCFnCC,EAAA,WAOE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,SAQpBD,EAAAG,UAAAC,iBAAA,SAA+CC,EAAqBC,EAAcC,QAAA,IAAAA,IAAAA,EAAA,UAC5EC,EAAS,IAAIC,EAAAA,WACjB,IAAK,IAAMC,KAAQJ,EACbI,KAAQJ,UAAoBA,EAAUI,KAAUC,WAAiC,OAApBL,EAAUI,KACzEF,EAASA,EAAOI,OAAOF,EAAMJ,EAAUI,KAG3C,OAAIH,EACKL,KAAKD,KAAKY,UACfR,EACA,CACEG,OAAQA,EACRM,QAASP,IAINL,KAAKD,KAAKY,UACfR,EACA,CACEG,OAAQA,KAYhBR,EAAAG,UAAAY,cAAA,SAA4CV,EAAqBC,EAAcC,QAAA,IAAAA,IAAAA,EAAA,UACzEC,EAAS,IAAIC,EAAAA,WACjB,IAAK,IAAMC,KAAQJ,EACbI,KAAQJ,UAAoBA,EAAUI,KAAUC,WAAiC,OAApBL,EAAUI,KACzEF,EAASA,EAAOI,OAAOF,EAAMJ,EAAUI,KAG3C,OAAIH,EACKL,KAAKD,KAAKe,IACfX,EACA,CACEG,OAAQA,EACRM,QAASP,IAINL,KAAKD,KAAKe,IACfX,EACA,CACEG,OAAQA,KAahBR,EAAAG,UAAAc,eAAA,SAGiBZ,EAAqBC,EAAcY,EAAmBX,QAAnB,IAAAW,IAAAA,EAAA,WAAmB,IAAAX,IAAAA,EAAA,UACjEC,EAAS,IAAIC,EAAAA,WACjB,IAAK,IAAMC,KAAQJ,EACbI,KAAQJ,UAAoBA,EAAUI,KAAUC,WAAiC,OAApBL,EAAUI,KACzEF,EAASA,EAAOI,OAAOF,EAAMJ,EAAUI,KAG3C,OAAIH,EAEOL,KAAKD,KAAKkB,KACfd,EACAa,EACA,CACEV,OAAQA,EACRM,QAASP,IAcXW,EACKhB,KAAKD,KAAKkB,KACfd,EACAa,EACA,CACEV,OAAQA,IAILN,KAAKD,KAAKkB,KACfd,EACA,CACEG,OAAQA,KAclBR,EAAAG,UAAAiB,cAAA,SAIIf,EACAC,EACAY,EACAX,QAAA,IAAAA,IAAAA,EAAA,UACEC,EAAS,IAAIC,EAAAA,WACjB,IAAK,IAAMC,KAAQJ,EACbI,KAAQJ,UAAoBA,EAAUI,KAAUC,WAAiC,OAApBL,EAAUI,KACzEF,EAASA,EAAOI,OAAOF,EAAMJ,EAAUI,KAG3C,OAAIH,EACKL,KAAKD,KAAKoB,IACfhB,EACAa,EACA,CACEV,OAAQA,EACRM,QAASP,IAINL,KAAKD,KAAKoB,IACfhB,EACAa,EACA,CACEV,OAAQA,yBAhKjBc,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLC,EAAAA,2IAAT,GCAAC,EAAA,WAIA,SAAAA,KAQgC,2BAR/BC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,QAAS,CACPC,EAAAA,kBAEFC,UAAW,CACT9B,OAG4B0B,EAZhC","sourcesContent":["import { Version } from '@angular/core';\n\nexport const VERSION = new Version('1.0.0-279f8d3-279f8d3');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SimpleHttpService {\n  constructor(private http: HttpClient) { }\n  /**\n   * Generates the query parameters to be used for a HTTP DELETE request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @return A `HttpClient` instance\n   */\n  createHttpDelete<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.delete<R>(\n        apiEndpoint,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.delete<R>(\n        apiEndpoint,\n        {\n          params: params\n        }\n      );\n    }\n  }\n  /**\n   * Generates the query parameters to be used for a HTTP GET request\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiHeaders HTTP headers to append to the request\n   * @return A `HttpClient` instance\n   */\n  createHttpGet<P extends any, R extends any>(apiEndpoint: string, apiParams: P, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.get<R>(\n        apiEndpoint,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.get<R>(\n        apiEndpoint,\n        {\n          params: params\n        }\n      );\n    }\n  }\n  /**\n   * Generates the query parameters to be used with the API endpoint\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @return A `HttpClient` instance\n   */\n  createHttpPost<\n    B extends any,\n    P extends any,\n    R extends any>(apiEndpoint: string, apiParams: P, apiBody: B = null, apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      if (apiBody) {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params,\n            headers: apiHeaders\n          }\n        );\n      } else {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params,\n            headers: apiHeaders\n          }\n        );\n      }\n    } else {\n      if (apiBody) {\n        return this.http.post<R>(\n          apiEndpoint,\n          apiBody,\n          {\n            params: params\n          }\n        );\n      } else {\n        return this.http.post<R>(\n          apiEndpoint,\n          {\n            params: params\n          }\n        );\n      }\n    }\n  }\n  /**\n   * Generates the query parameters to be used with the API endpoint\n   * @param apiEndpoint The API endpoint\n   * @param apiParams Parameters to append to the API endpoint\n   * @param apiBody The request body\n   * @param apiHeaders HTTP headers to append to the request\n   * @return A `HttpClient` instance\n   */\n  createHttpPut<\n    B extends any,\n    P extends any,\n    R extends any>(\n      apiEndpoint: string,\n      apiParams: P,\n      apiBody: B,\n      apiHeaders: HttpHeaders = null): Observable<R> {\n    let params = new HttpParams();\n    for (const prop in apiParams) {\n      if (prop in apiParams && typeof apiParams[prop] !== undefined && apiParams[prop] !== null) {\n        params = params.append(prop, apiParams[prop]);\n      }\n    }\n    if (apiHeaders) {\n      return this.http.put<R>(\n        apiEndpoint,\n        apiBody,\n        {\n          params: params,\n          headers: apiHeaders\n        }\n      );\n    } else {\n      return this.http.put<R>(\n        apiEndpoint,\n        apiBody,\n        {\n          params: params\n        }\n      );\n    }\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { SimpleHttpService } from './simple-http.service';\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ],\n  providers: [\n    SimpleHttpService\n  ]\n})\nexport class SimpleHttpModule { }\n"]}